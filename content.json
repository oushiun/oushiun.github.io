{"meta":{"title":"oushiun","subtitle":null,"description":"互联网产品、技术、设计文章分享","author":"oushiun","url":"http://oushiun.com"},"pages":[{"title":"About","date":"2018-05-15T02:26:48.272Z","updated":"2018-05-15T02:26:48.272Z","comments":false,"path":"about/index.html","permalink":"http://oushiun.com/about/index.html","excerpt":"","text":"玩物丧志 其志小志大者 玩物养志"},{"title":"Categories","date":"2018-05-09T03:07:44.547Z","updated":"2018-05-09T03:07:44.547Z","comments":false,"path":"categories/index.html","permalink":"http://oushiun.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-05-09T03:07:48.749Z","updated":"2018-05-09T03:07:48.749Z","comments":false,"path":"tags/index.html","permalink":"http://oushiun.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用 Kotlin 进行 JavaScript 开发","slug":"kotlin-js-overview","date":"2018-05-15T02:47:22.000Z","updated":"2018-05-15T03:05:55.281Z","comments":true,"path":"2018/05/15/kotlin-js-overview/","link":"","permalink":"http://oushiun.com/2018/05/15/kotlin-js-overview/","excerpt":"","text":"Kotlin 提供了 JavaScript 作为目标平台的能力。它通过将 Kotlin 转换为 JavaScript 来实现。目前的实现目标是 ECMAScript 5.1，但也有最终目标为 ECMAScript 2015 的计划。 当你选择 JavaScript 目标时，作为项目一部分的任何 Kotlin 代码以及 Kotlin 附带的标准库都会转换为 JavaScript。然而，这不包括使用的 JDK 和任何 JVM 或 Java 框架或库。任何不是 Kotlin 的文件会在编译期间忽略掉。 Kotlin 编译器努力遵循以下目标： 提供最佳大小的输出 提供可读的 JavaScript 输出 提供与现有模块系统的互操作性 在标准库中提供相同的功能，无论是 JavaScript 还是 JVM 目标（尽最大可能程度）。 如何使用你可能希望在以下情景中将 Kotlin 编译为 JavaScript： 创建面向客户端 JavaScript 的 Kotlin 代码 与 DOM 元素交互。Kotlin 提供了一系列静态类型的接口来与文档对象模型（Document Object Model）交互，允许创建和更新 DOM 元素。 与图形如 WebGL 交互。你可以使用 Kotlin 在网页上用 WebGL 创建图形元素。 创建面向服务器端 JavaScript 的 Kotlin 代码 使用服务器端技术。你可以使用 Kotlin 与服务器端 JavaScript（如 Node.js）进行交互 Kotlin 可以与现有的第三方库和框架（如 jQuery 或 ReactJS）一起使用。要使用强类型API 访问第三方框架，可以使用 ts2kt 工具将 TypeScript 定义从 Definitely Typed类型定义仓库转换为 Kotlin。或者，你可以使用动态类型访问任何框架，而无需强类型。 JetBrains 特地为 React 社区开发并维护了几个工具：React bindings 以及 Create React Kotlin App。后者可以帮你开始使用 Kotlin 构建 React 应用程序而无需构建配置。 Kotlin 兼容 CommonJS、AMD 和 UMD，直截了当与不同的模块系统交互。 Kotlin 转 JavaScript 入门要了解如何开始使用 JavaScript 平台的 Kotlin，请参考其教程。","categories":[{"name":"后端","slug":"后端","permalink":"http://oushiun.com/categories/后端/"},{"name":"Kotlin","slug":"后端/Kotlin","permalink":"http://oushiun.com/categories/后端/Kotlin/"},{"name":"概述","slug":"后端/Kotlin/概述","permalink":"http://oushiun.com/categories/后端/Kotlin/概述/"}],"tags":[{"name":"Kotlin","slug":"Kotlin","permalink":"http://oushiun.com/tags/Kotlin/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://oushiun.com/tags/JavaScript/"}]},{"title":"使用 Kotlin 进行 Android 开发","slug":"kotlin-android-overview","date":"2018-05-15T02:31:26.000Z","updated":"2018-05-15T03:05:49.173Z","comments":true,"path":"2018/05/15/kotlin-android-overview/","link":"","permalink":"http://oushiun.com/2018/05/15/kotlin-android-overview/","excerpt":"Kotlin 非常适合开发 Android 应用程序，将现代语言的所有优势带入Android 平台而不会引入任何新的限制： 兼容性：Kotlin 与 JDK 6 完全兼容，保障了 Kotlin 应用程序可以在较旧的 Android 设备上运行而无任何问题。Kotlin 工具在 Android Studio 中会完全支持，并且兼容 Android 构建系统。 性能：由于非常相似的字节码结构，Kotlin 应用程序的运行速度与 Java 类似。随着 Kotlin 对内联函数的支持，使用 lambda 表达式的代码通常比用 Java 写的代码运行得更快。 互操作性：Kotlin 可与 Java 进行 100％ 的互操作，允许在 Kotlin 应用程序中使用所有现有的 Android 库。这包括注解处理，所以数据绑定和 Dagger 也是一样。 占用：Kotlin 具有非常紧凑的运行时库，可以通过使用 ProGuard 进一步减少。在实际应用程序中，Kotlin 运行时只增加几百个方法以及 .apk 文件不到 100K 大小。 编译时长：Kotlin 支持高效的增量编译，所以对于清理构建会有额外的开销，增量构建通常与 Java 一样快或者更快。 学习曲线：对于 Java 开发人员，Kotlin 入门很容易。包含在 Kotlin 插件中的自动 Java 到 Kotlin 的转换有助于迈出第一步。","text":"Kotlin 非常适合开发 Android 应用程序，将现代语言的所有优势带入Android 平台而不会引入任何新的限制： 兼容性：Kotlin 与 JDK 6 完全兼容，保障了 Kotlin 应用程序可以在较旧的 Android 设备上运行而无任何问题。Kotlin 工具在 Android Studio 中会完全支持，并且兼容 Android 构建系统。 性能：由于非常相似的字节码结构，Kotlin 应用程序的运行速度与 Java 类似。随着 Kotlin 对内联函数的支持，使用 lambda 表达式的代码通常比用 Java 写的代码运行得更快。 互操作性：Kotlin 可与 Java 进行 100％ 的互操作，允许在 Kotlin 应用程序中使用所有现有的 Android 库。这包括注解处理，所以数据绑定和 Dagger 也是一样。 占用：Kotlin 具有非常紧凑的运行时库，可以通过使用 ProGuard 进一步减少。在实际应用程序中，Kotlin 运行时只增加几百个方法以及 .apk 文件不到 100K 大小。 编译时长：Kotlin 支持高效的增量编译，所以对于清理构建会有额外的开销，增量构建通常与 Java 一样快或者更快。 学习曲线：对于 Java 开发人员，Kotlin 入门很容易。包含在 Kotlin 插件中的自动 Java 到 Kotlin 的转换有助于迈出第一步。 Kotlin 用于 Android 的案例学习Kotlin 已被一些大公司成功采用，其中一些公司分享了他们的经验： Pinterest 已经成功地将 Kotlin 引入了他们的应用程序中，每个月有 1 亿 5 千万人使用。 Basecamp 的 Android 应用程序是 100％ Kotlin 代码，他们报告了程序员幸福的巨大差异，以及工作质量和速度的巨大改善。 Keepsafe 的 App Lock 应用程序也已转换为 100％ Kotlin，使源代码行数减少 30％、方法数减少 10％。 用于 Android 开发的工具Kotlin 团队为 Android 开发提供了一套超越标准语言功能的工具： Kotlin Android 扩展是一个编译器扩展，可以让你摆脱代码中的 findViewById() 调用，并将其替换为合成的编译器生成的属性。 Anko 是一个提供围绕 Android API 的 Kotlin 友好的包装器的库，以及一个可以用 Kotlin 代码替换布局 .xml 文件的 DSL。 下一步 下载并安装 Android Studio 3.0，其中包含开箱即用的 Kotlin 支持。 按照 Android 与 Kotlin 入门教程创建你的第一个 Kotlin 应用程序。 关于更深入的介绍，请查看本站的参考文档。 另一个很好的资源是 Kotlin for Android Developers，这本书会引导你逐步完成在 Kotlin 中创建真正的 Android 应用程序的过程。 检出 Google 的 Kotlin 写的示例项目。","categories":[{"name":"后端","slug":"后端","permalink":"http://oushiun.com/categories/后端/"},{"name":"Kotlin","slug":"后端/Kotlin","permalink":"http://oushiun.com/categories/后端/Kotlin/"},{"name":"概述","slug":"后端/Kotlin/概述","permalink":"http://oushiun.com/categories/后端/Kotlin/概述/"}],"tags":[{"name":"Kotlin","slug":"Kotlin","permalink":"http://oushiun.com/tags/Kotlin/"},{"name":"Android","slug":"Android","permalink":"http://oushiun.com/tags/Android/"}]},{"title":"使用 Kotlin 进行服务器端开发","slug":"kotlin-server-overview","date":"2018-05-15T01:22:38.000Z","updated":"2018-05-15T03:06:01.354Z","comments":true,"path":"2018/05/15/kotlin-server-overview/","link":"","permalink":"http://oushiun.com/2018/05/15/kotlin-server-overview/","excerpt":"Kotlin 非常适合开发服务器端应用程序，允许编写简明且表现力强的代码，同时保持与现有基于 Java 的技术栈的完全兼容性以及平滑的学习曲线： 表现力：Kotlin 的革新式语言功能，例如支持类型安全的构建器和委托属性，有助于构建强大而易于使用的抽象。 可伸缩性：Kotlin 对协程的支持有助于构建服务器端应用程序，伸缩到适度的硬件要求以应对大量的客户端。 互操作性：Kotlin 与所有基于 Java 的框架完全兼容，可以让你保持熟悉的技术栈，同时获得更现代化语言的优势。 迁移：Kotlin 支持大型代码库从 Java 到 Kotlin 逐步迁移。你可以开始用 Kotlin 编写新代码，同时系统中较旧部分继续用 Java。 工具：除了很棒的 IDE 支持之外，Kotlin 还为 IntelliJ IDEA Ultimate 的插件提供了框架特定的工具（例如Spring）。 学习曲线：对于 Java 开发人员，Kotlin 入门很容易。包含在 Kotlin 插件中的自动 Java 到 Kotlin 的转换器有助于迈出第一步。","text":"Kotlin 非常适合开发服务器端应用程序，允许编写简明且表现力强的代码，同时保持与现有基于 Java 的技术栈的完全兼容性以及平滑的学习曲线： 表现力：Kotlin 的革新式语言功能，例如支持类型安全的构建器和委托属性，有助于构建强大而易于使用的抽象。 可伸缩性：Kotlin 对协程的支持有助于构建服务器端应用程序，伸缩到适度的硬件要求以应对大量的客户端。 互操作性：Kotlin 与所有基于 Java 的框架完全兼容，可以让你保持熟悉的技术栈，同时获得更现代化语言的优势。 迁移：Kotlin 支持大型代码库从 Java 到 Kotlin 逐步迁移。你可以开始用 Kotlin 编写新代码，同时系统中较旧部分继续用 Java。 工具：除了很棒的 IDE 支持之外，Kotlin 还为 IntelliJ IDEA Ultimate 的插件提供了框架特定的工具（例如Spring）。 学习曲线：对于 Java 开发人员，Kotlin 入门很容易。包含在 Kotlin 插件中的自动 Java 到 Kotlin 的转换器有助于迈出第一步。 使用 Kotlin 进行服务器端开发的框架 Spring 利用 Kotlin 的语言功能提供更简洁的 API，从版本 5.0 开始。在线项目生成器允许用 Kotlin 快速生成一个新项目。 Vert.x 是在 JVM 上构建响应式 Web 应用程序的框架，为 Kotlin 提供了专门支持，包括完整的文档。 Ktor 是由 JetBrains 构建的 Kotlin 原生 Web 框架，利用协程实现高可伸缩性，并提供易于使用且合乎惯用法的 API。 kotlinx.html 是可在 Web 应用程序中用于构建 HTML 的 DSL。它可以作为传统模板系统（如JSP和FreeMarker）的替代品。 通过相应 Java 驱动程序进行持久化的可用选项包括直接 JDBC 访问、JPA 以及使用 NoSQL 数据库。对于 JPA，kotlin-jpa 编译器插件使 Kotlin 编译的类适应框架的要求。 部署 Kotlin 服务器端应用程序Kotlin 应用程序可以部署到支持 Java Web 应用程序的任何主机，包括 Amazon Web Services、Google Cloud Platform 等。 要在 Heroku 上部署 Kotlin 应用程序，可以按照 Heroku 官方教程来做。 AWS Labs 提供了一个示例项目，展示了 Kotlin 编写 AWS Lambda 函数的使用。 Kotlin 用于服务器端的用户Corda 是一个开源的分布式分类帐平台，由各大银行提供支持，完全由 Kotlin 构建。 JetBrains 账户，负责 JetBrains 整个许可证销售和验证过程的系统 100％ 由 Kotlin 编写，自 2015 年生产运行以来，一直没有重大问题。 下一步 使用 Http Servlet 创建 Web 应用程序 及 使用 Spring Boot 创建 RESTful Web 服务教程将向你展示如何在 Kotlin 中构建和运行非常小的 Web 应用程序。 关于更深入的介绍，请查看本站的参考文档 及 Kotlin 心印。","categories":[{"name":"后端","slug":"后端","permalink":"http://oushiun.com/categories/后端/"},{"name":"Kotlin","slug":"后端/Kotlin","permalink":"http://oushiun.com/categories/后端/Kotlin/"},{"name":"概述","slug":"后端/Kotlin/概述","permalink":"http://oushiun.com/categories/后端/Kotlin/概述/"}],"tags":[{"name":"Kotlin","slug":"Kotlin","permalink":"http://oushiun.com/tags/Kotlin/"},{"name":"服务器端","slug":"服务器端","permalink":"http://oushiun.com/tags/服务器端/"}]},{"title":"Css 盒子模型","slug":"css-box-model","date":"2018-05-10T14:46:15.000Z","updated":"2018-05-15T03:05:40.216Z","comments":true,"path":"2018/05/10/css-box-model/","link":"","permalink":"http://oushiun.com/2018/05/10/css-box-model/","excerpt":"盒模型(box model)是CSS中的一个重要概念，它是元素大小的呈现方式。需要记住的是：”every element in web design is a rectangular box”。如图：","text":"盒模型(box model)是CSS中的一个重要概念，它是元素大小的呈现方式。需要记住的是：”every element in web design is a rectangular box”。如图： CSS3中新增了一种盒模型计算方式：box-sizing熟悉。盒模型默认的值是content-box, 新增的值是padding-box和border-box，几种盒模型计算元素宽高的区别如下： content-box（默认）布局所占宽度Width： Width = width + padding-left + padding-right + border-left + border-right 布局所占高度Height: Height = height + padding-top + padding-bottom + border-top + border-bottom padding-box布局所占宽度Width： Width = width(包含padding-left + padding-right) + border-top + border-bottom 布局所占高度Height: Height = height(包含padding-top + padding-bottom) + border-top + border-bottom border-box布局所占宽度Width： Width = width(包含padding-left + padding-right + border-left + border-right) 布局所占高度Height: Height = height(包含padding-top + padding-bottom + border-top + border-bottom) margin叠加外边距叠加是一个相当简单的概念。 但是，在实践中对网页进行布局时， 它会造成许多混淆。 简单的说， 当两个或更多个垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生叠加的外边距的高度中的较大者。但是注意只有普通文档流中块框的垂直外边距才会发生外边距叠加。 行内框、 浮动框或绝对定位框之间的外边距不会叠加。 一般来说， 垂直外边距叠加有三种情况： 元素自身叠加 当元素没有内容（即空元素）、内边距、边框时， 它的上下边距就相遇了， 即会产生叠加（垂直方向）。 当为元素添加内容、 内边距、 边框任何一项， 就会取消叠加。 相邻元素叠加 相邻的两个元素， 如果它们的上下边距相遇，即会产生叠加。 包含（父子）元素叠加 包含元素的外边距隔着 父元素的内边距和边框， 当这两项都不存在的时候， 父子元素垂直外边距相邻， 产生叠加。 添加任何一项即会取消叠加。 参考资料CSS-TRICKS:The CSS Box Model CSS Magic: The Box","categories":[{"name":"前端","slug":"前端","permalink":"http://oushiun.com/categories/前端/"},{"name":"Css","slug":"前端/Css","permalink":"http://oushiun.com/categories/前端/Css/"}],"tags":[{"name":"Box Model","slug":"Box-Model","permalink":"http://oushiun.com/tags/Box-Model/"}]},{"title":"CentOS 搭建 shadowsocks","slug":"centos-install-shadowsocks","date":"2018-05-09T14:20:38.000Z","updated":"2018-05-15T03:05:34.786Z","comments":true,"path":"2018/05/09/centos-install-shadowsocks/","link":"","permalink":"http://oushiun.com/2018/05/09/centos-install-shadowsocks/","excerpt":"Shadowsocks(ss) 是由 Clowwindy 开发的一款软件，其作用本来是加密传输资料。当然，也正因为它加密传输资料的特性，使得 GFW 没法将由它传输的资料和其他普通资料区分开来，也就不能干扰我们访问那些「不存在」的网站了。","text":"Shadowsocks(ss) 是由 Clowwindy 开发的一款软件，其作用本来是加密传输资料。当然，也正因为它加密传输资料的特性，使得 GFW 没法将由它传输的资料和其他普通资料区分开来，也就不能干扰我们访问那些「不存在」的网站了。 安装shadowsocks安装pipPip 是 Python 的包管理工具，这里我们用 pip 安装 shadowsocks。 123wget https://bootstrap.pypa.io/get-pip.pypython get-pip.pypip -V #pip 10.0.1 from /usr/lib/python2.7/site-packages/pip (python 2.7) 通过pip安装shadowsocks12pip install --upgrade pippip install shadowsocks 配置shadowsocks1234567891011# vi /etc/shadowsocks.json&#123; \"server\":\"x.x.x.x\", #你的 ss 服务器 ip \"server_port\":0, #你的 ss 服务器端口 \"local_address\": \"127.0.0.1\", #本地ip \"local_port\":0, #本地端口 \"password\":\"password\", #连接 ss 密码 \"timeout\":300, #等待超时 \"method\":\"aes-256-cfb\", #加密方式 \"workers\": 1 #工作线程数&#125; systemctl设置1234567891011121314# vi /etc/systemd/system/shadowsocks.service[Unit]Description=Shadowsocks[Service]Type=forkingPIDFile=/run/shadowsocks/server.pidPermissionsStartOnly=trueExecStartPre=/bin/mkdir -p /run/shadowsocksExecStart=/usr/bin/ssserver --pid-file /var/run/shadowsocks/server.pid --log-file /var/log/shadowsocks.log -c /etc/shadowsocks.json -d startRestart=on-abort[Install]WantedBy=multi-user.target 配置firwall规则输入以下命令开启一个端口，如果不是 9002 端口，修改成自己需要添加的端口（–permanent 永久生效，没有此参数重启后失效）。 1firewall-cmd --zone=public --add-port=9002/tcp --permanent 添加端口后系统返回success说明添加成功。这个时候需要重新载入 firewall，输入以下命令，返回success后此端口就可使用 1firewall-cmd --reload shadowsocks其他配置1234567891011121314151617181920212223242526272829ssserver -husage: ssserver [OPTION]...A fast tunnel proxy that helps you bypass firewalls.You can supply configurations via either config file or command line arguments.Proxy options: -c CONFIG path to config file -s SERVER_ADDR server address, default: 0.0.0.0 -p SERVER_PORT server port, default: 8388 -k PASSWORD password -m METHOD encryption method, default: aes-256-cfb -t TIMEOUT timeout in seconds, default: 300 --fast-open use TCP_FASTOPEN, requires Linux 3.7+ --workers WORKERS number of workers, available on Unix/Linux --forbidden-ip IPLIST comma seperated IP list forbidden to connect --manager-address ADDR optional server manager UDP address, see wikiGeneral options: -h, --help show this help message and exit -d start/stop/restart daemon mode --pid-file PID_FILE pid file for daemon mode --log-file LOG_FILE log file for daemon mode --user USER username to run as -v, -vv verbose mode -q, -qq quiet mode, only show warnings/errors --version show version informationOnline help: &lt;https://github.com/shadowsocks/shadowsocks&gt;","categories":[{"name":"工具","slug":"工具","permalink":"http://oushiun.com/categories/工具/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://oushiun.com/tags/CentOS/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://oushiun.com/tags/shadowsocks/"}]},{"title":"Markdown","slug":"markdown","date":"2018-05-09T01:41:47.000Z","updated":"2018-05-15T02:55:14.825Z","comments":true,"path":"2018/05/09/markdown/","link":"","permalink":"http://oushiun.com/2018/05/09/markdown/","excerpt":"A markdown example shows how to write a markdown file. This document integrates core syntax and extensions (GMF).","text":"A markdown example shows how to write a markdown file. This document integrates core syntax and extensions (GMF). Block ElementsParagraphs and Line BreaksParagraphsHTML Tag: &lt;p&gt; One or more blank lines. (A blank line is a line containing nothing but spaces or tabs is considered blank.) Code: This will be inline. This is second paragraph. Preview: This will beinline. This is second paragraph. Line BreaksHTML Tag: &lt;br /&gt; End a line with two or more spaces. Code: This will be not inline. Preview: This will be notinline. HeadersMarkdown supports two styles of headers, Setext and atx. SetextHTML Tags: &lt;h1&gt;, &lt;h2&gt; “Underlined” using equal signs (=) as &lt;h1&gt; and dashes (-) as &lt;h2&gt; in any number. Code: This is an H1 ============= This is an H2 ------------- Preview: This is an H1This is an H2 atxHTML Tags: &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt; Uses 1-6 hash characters (#) at the start of the line, corresponding to &lt;h1&gt; - &lt;h6&gt;. Code: # This is an H1 ## This is an H2 ###### This is an H6 Preview: This is an H1This is an H2This is an H6 Optionally, you may “close” atx-style headers. The closing hashes don’t need to match the number of hashes used to open the header. Code: # This is an H1 # ## This is an H2 ## ### This is an H3 ###### Preview: This is an H1This is an H2This is an H3 BlockquotesHTML Tag: &lt;blockquote&gt; Markdown uses email-style &gt; characters for blockquoting. It looks best if you hard wrap the text and put a &gt; before every line. Code: &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse &gt; id sem consectetuer libero luctus adipiscing. Preview: This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. Markdown allows you to be lazy and only put the &gt; before the first line of a hard-wrapped paragraph. Code: &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. Preview: This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of &gt;. Code: &gt; This is the first level of quoting. &gt; &gt; &gt; This is nested blockquote. &gt; &gt; Back to the first level. Preview: This is the first level of quoting. This is nested blockquote. Back to the first level. Blockquotes can contain other Markdown elements, including headers, lists, and code blocks. Code: &gt; ## This is a header. &gt; &gt; 1. This is the first list item. &gt; 2. This is the second list item. &gt; &gt; Here&apos;s some example code: &gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); Preview: This is a header. This is the first list item. This is the second list item. Here’s some example code: return shell_exec(&quot;echo $input | $markdown_script&quot;); ListsMarkdown supports ordered (numbered) and unordered (bulleted) lists. UnorderedHTML Tag: &lt;ul&gt; Unordered lists use asterisks (*), pluses (+), and hyphens (-). Code: * Red * Green * Blue Preview: Red Green Blue is equivalent to: Code: + Red + Green + Blue and: Code: - Red - Green - Blue OrderedHTML Tag: &lt;ol&gt; Ordered lists use numbers followed by periods: Code: 1. Bird 2. McHale 3. Parish Preview: Bird McHale Parish It’s possible to trigger an ordered list by accident, by writing something like this: Code: 1986. What a great season. Preview: What a great season. You can backslash-escape (\\) the period: Code: 1986\\. What a great season. Preview: 1986. What a great season. IndentedBlockquoteTo put a blockquote within a list item, the blockquote’s &gt; delimiters need to be indented: Code: * A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. Preview: A list item with a blockquote: This is a blockquoteinside a list item. Code BlockTo put a code block within a list item, the code block needs to be indented twice — 8 spaces or two tabs: Code: * A list item with a code block: &lt;code goes here&gt; Preview: A list item with a code block: &lt;code goes here&gt; Nested ListCode: * A * A1 * A2 * B * C Preview: A A1 A2 B C Code BlocksHTML Tag: &lt;pre&gt; Indent every line of the block by at least 4 spaces or 1 tab. Code: This is a normal paragraph: This is a code block. Preview: This is a normal paragraph: This is a code block. A code block continues until it reaches a line that is not indented (or the end of the article). Within a code block, ampersands (&amp;) and angle brackets (&lt; and &gt;) are automatically converted into HTML entities. Code: &lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; Preview: &lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; Following sections Fenced Code Blocks and Syntax Highlighting are extensions, you can use the other way to write the code block. Fenced Code BlocksJust wrap your code in ``` ```` (as shown below) and you won't need to indent it by four spaces.1234Code: Here&apos;s an example: function test() { console.log(&quot;notice the blank line before this function?&quot;); } 123Preview:***Here&apos;s an example: function test() { console.log(“notice the blank line before this function?”);}12345678910***#### Syntax HighlightingIn your fenced block, add an optional language identifier and we&apos;ll run it through syntax highlighting ([Support Languages](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml)).Code: ```ruby require &apos;redcarpet&apos; markdown = Redcarpet.new(&quot;Hello World!&quot;) puts markdown.to_html Preview: 123require 'redcarpet'markdown = Redcarpet.new(\"Hello World!\")puts markdown.to_html Horizontal RulesHTML Tag: &lt;hr /&gt;Places three or more hyphens (-), asterisks (*), or underscores (_) on a line by themselves. You may use spaces between the hyphens or asterisks. Code: * * * *** ***** - - - --------------------------------------- ___ Preview: TableHTML Tag: &lt;table&gt; It’s an extension. Separates column by pipe (|) and header by dashes (-), and uses colon (:) for alignment. The outer pipes (|) and alignment are optional. There are 3 delimiters each cell at least for separating header. Code:12345678910111213| Left | Center | Right ||:-----|:------:|------:||aaa |bbb |ccc ||ddd |eee |fff | A | B---|---123|456A |B--|--12|45 Preview: Left Center Right aaa bbb ccc ddd eee fff A B 123 456 A B 12 45 Span ElementsLinksHTML Tag: &lt;a&gt; Markdown supports two style of links: inline and reference. InlineInline link format like this: [Link Text](URL &quot;Title&quot;) Title is optional. Code: This is [an example](http://example.com/ &quot;Title&quot;) inline link. [This link](http://example.net/) has no title attribute. Preview: This is an example inline link. This link has no title attribute. If you’re referring to a local resource on the same server, you can use relative paths: Code: See my [About](/about/) page for details. Preview: See my About page for details. ReferenceYou could predefine link references. Format like this: [id]: URL &quot;Title&quot; Title is also optional. And the you refer the link, format like this: [Link Text][id] Code: [id]: http://example.com/ &quot;Optional Title Here&quot; This is [an example][id] reference-style link. Preview: This is an example reference-style link. That is: Square brackets containing the link identifier (not case sensitive, optionally indented from the left margin using up to three spaces); followed by a colon; followed by one or more spaces (or tabs); followed by the URL for the link; The link URL may, optionally, be surrounded by angle brackets. optionally followed by a title attribute for the link, enclosed in double or single quotes, or enclosed in parentheses. The following three link definitions are equivalent: Code: [foo]: http://example.com/ &quot;Optional Title Here&quot; [foo]: http://example.com/ &apos;Optional Title Here&apos; [foo]: http://example.com/ (Optional Title Here) [foo]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot; Uses an empty set of square brackets, the link text itself is used as the name. Code: [Google]: http://google.com/ [Google][] Preview: Google EmphasisHTML Tags: &lt;em&gt;, &lt;strong&gt; Markdown treats asterisks (*) and underscores (_) as indicators of emphasis. One delimiter will be &lt;em&gt;; *double delimiters will be &lt;strong&gt;. Code: *single asterisks* _single underscores_ **double asterisks** __double underscores__ Preview: single asterisks single underscores double asterisks double underscores But if you surround an * or _ with spaces, it’ll be treated as a literal asterisk or underscore. You can backslash escape it: Code: \\*this text is surrounded by literal asterisks\\* Preview: *this text is surrounded by literal asterisks* CodeHTML Tag: &lt;code&gt; Wraps it with backtick quotes (`). Code: Use the `printf()` function. Preview: Use the printf() function. To include a literal backtick character within a code span, you can use multiple backticks as the opening and closing delimiters: Code: ``There is a literal backtick (`) here.`` Preview: There is a literal backtick (`) here. The backtick delimiters surrounding a code span may include spaces — one after the opening, one before the closing. This allows you to place literal backtick characters at the beginning or end of a code span: Code: A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` Preview: A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` ImagesHTML Tag: &lt;img /&gt; Markdown uses an image syntax that is intended to resemble the syntax for links, allowing for two styles: inline and reference. InlineInline image syntax looks like this: ![Alt text](URL &quot;Title&quot;) Title is optional. Code: ![Alt text](https://static.oushiun.com/blog/img/desk.jpg) ![Alt text](https://static.oushiun.com/blog/img/desk.jpg &quot;Optional title&quot;) Preview: That is: An exclamation mark: !; followed by a set of square brackets, containing the alt attribute text for the image; followed by a set of parentheses, containing the URL or path to the image, and an optional title attribute enclosed in double or single quotes. ReferenceReference-style image syntax looks like this: ![Alt text][id] Code: [img id]: https://static.oushiun.com/blog/img/desk.jpg &quot;Optional title attribute&quot; ![Alt text][img id] Preview: StrikethroughHTML Tag: &lt;del&gt; It’s an extension. GFM adds syntax to strikethrough text. Code:1~~Mistaken text.~~ Preview: Mistaken text. MiscellaneousAutomatic LinksMarkdown supports a shortcut style for creating “automatic” links for URLs and email addresses: simply surround the URL or email address with angle brackets. Code: &lt;http://example.com/&gt; &lt;address@example.com&gt; Preview: http://example.com/ &#x61;&#x64;&#100;&#114;&#101;&#115;&#115;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#46;&#99;&#111;&#x6d; GFM will autolink standard URLs. Code:1https://github.com/emn178/markdown Preview: https://github.com/emn178/markdown Backslash EscapesMarkdown allows you to use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown’s formatting syntax. Code: \\*literal asterisks\\* Preview: *literal asterisks* Markdown provides backslash escapes for the following characters: Code: \\ backslash ` backtick * asterisk _ underscore {} curly braces [] square brackets () parentheses # hash mark + plus sign - minus sign (hyphen) . dot ! exclamation mark Inline HTMLFor any markup that is not covered by Markdown’s syntax, you simply use HTML itself. There’s no need to preface it or delimit it to indicate that you’re switching from Markdown to HTML; you just use the tags. Code: This is a regular paragraph. &lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; This is another regular paragraph. Preview: This is a regular paragraph. Foo This is another regular paragraph. Note that Markdown formatting syntax is not processed within block-level HTML tags. Unlike block-level HTML tags, Markdown syntax is processed within span-level tags. Code: &lt;span&gt;**Work**&lt;/span&gt; &lt;div&gt; **No Work** &lt;/div&gt; Preview: Work No Work","categories":[{"name":"工具","slug":"工具","permalink":"http://oushiun.com/categories/工具/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://oushiun.com/tags/Markdown/"}]},{"title":"Hello Hexo","slug":"hello-hexo","date":"2018-05-08T02:32:25.448Z","updated":"2018-05-15T02:26:36.556Z","comments":true,"path":"2018/05/08/hello-hexo/","link":"","permalink":"http://oushiun.com/2018/05/08/hello-hexo/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"其他","slug":"其他","permalink":"http://oushiun.com/categories/其他/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://oushiun.com/tags/Hexo/"}]}]}